apply from: 'pojogen.gradle'
import org.apache.commons.codec.binary.Base64

defaultTasks 'configGen'
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'commons-codec:commons-codec:1.10'
    }
}

task configGen {
    String gitChanged = 'git status --porcelain'.execute([], file('.')).text.trim();
    gitChanged += 'git ls-files --others --exclude-standard'.execute([], file('.')).text.trim();
    List<String> allLines = gitChanged.readLines();
    String apiLoc = file('.').absolutePath + "/src/main/jni/api.h";

    boolean enableAutoGen = false;
    String endPointRef = endPoint.replaceAll(file('.').absolutePath + "/", "")
    String apiLocRef = apiLoc.replaceAll(file('.').absolutePath + "/", "")

    for (String eachLine : allLines) {
        if (eachLine.contains(apiLocRef) || eachLine.contains(endPointRef)) {
            enableAutoGen = true;
            break;
        }
    }
    if (enableAutoGen) {
        File endPointFile = new File(endPoint);
        File apiFile = new File(apiLoc);

        if (!endPointFile.exists()) {
            throw new IOException("Couldn't find config file");
        }
        if (apiFile.exists()) {
            apiFile.delete();
        }
        if (!apiFile.createNewFile()) {
            throw new IOException("Couldn't create config file");
        }

        String headerComment = "/* \n * Auto generated on " + new Date().toString() +
                " do not edit\n */\n";

        String declaration = "extern char *config;\nchar *config = (char *) ";

        StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new FileReader(endPointFile));
        String sCurrentLine;
        while ((sCurrentLine = br.readLine()) != null) {
            sb.append(sCurrentLine.trim());
        }

        String json = encode(sb.toString());
        sb.setLength(0);
        String data = sb.append(headerComment)
                .append(declaration)
                .append('"')
                .append(json.replace('"', '\\"'))
                .append('";')
                .toString();
        try {
            FileWriter writer = new FileWriter(apiFile);
            writer.write(data);
            writer.flush();
            writer.close();
        } catch (Exception e) {
            throw new IOException("Couldn't write config file " + e);
        }
    } else {
        println 'No changes in config'
    }
}

def static encode(json) {
    def byte[] encodedString = new Base64().encode(json as byte[])
    return new String(encodedString)
}
