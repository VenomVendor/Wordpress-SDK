buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.4.0-alpha1'
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:0.4.31'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

apply from: 'version.gradle'
apply from: 'jacoco.gradle'
apply plugin: 'com.android.library'

repositories {
    jcenter()
}

android {
    compileSdkVersion compileSdk
    buildToolsVersion buildTools
    defaultPublishConfig 'release'
    publishNonDefault false

    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode project.ext.versionCode
        versionName project.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules-sdk.pro'

        externalNativeBuild {
            cmake {
//                arguments ""
//                cFlags ""
//                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            jniDebuggable false
            proguardFiles 'proguard-android-optimize.txt', 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
        incremental true
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
        return true
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Annotations
    compile "com.android.support:support-annotations:${support}"

    // Network Connection
    compile "com.squareup.okhttp3:okhttp:${okhttp}"
    compile "com.squareup.okhttp3:okhttp-urlconnection:${okhttp}"
    compile "com.squareup.okhttp3:okhttp-android-support:${okhttp}"

    // WebService
    compile "com.squareup.retrofit2:retrofit:${retrofit}"
    compile "com.squareup.retrofit2:converter-jackson:${retrofit}"

    // JSON Parsers
    compile "com.fasterxml.jackson.core:jackson-core:${jackson}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jackson}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson}"

    // Unit Test
    testCompile "junit:junit:${junit}"
    testCompile "org.hamcrest:hamcrest-library:${hamcrest}"
}

if (publish) {
    apply from: 'publish.gradle'
}

